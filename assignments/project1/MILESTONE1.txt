Student Name #1: Steven Wallace [12228145]
Student ugrad login #1: x9u9a

Student Name #2: Ahmed Elmaghraby [45461134]
Student ugrad login #2: x2x9a

TODO: Acknowledgment that you understand and have followed the course's collaboration policy
(http://www.ugrad.cs.ubc.ca/~cs221/current/syllabus.shtml#conduct):

Steven Wallace and Ahmed Elmaghraby

TODO: submit using: make handin-milestone1
(Run that from one of the UBC ugrad computers, after you have transfered
your files there and tested to make sure they work correctly on our systems.)

----------------------------------------------------------------------

Questions:

For the explanations, generally a sentence or two should be enough.
Type your answers directly in this file.

0.  Compile the program (using make).  What puzzle does it solve?

ANSWER: The wolf-goat-cabbage problem

1.  Edit solve.cpp to solve the MazeRunner problem, and set the code
to declare activeStates as ArrayStack or LinkedListStack.  (You should
only comment out one line and uncomment one line to do that.)
Do you see why it's called depth-first search (DFS)?
(If not, you can increase the delay in the usleep call to slow down
the animation.)
How many steps long was the solution it found?
Does it make a difference whether you use ArrayStack or LinkedListStack?

ANSWER: Both the ArrayStack and LinkedListStack took 59 steps to solve.
It is called depth-first search because it goes all the way down a path
as far as it can until it either finds a dead end or finds the solution.
If it finds the dead end it will backtrack to the last intersection where
it hasn't checked yet and go down that path. 

2.  Edit solve.cpp to solve the empty Sudoku board.
What solution do you get?

ANSWER:
 9 8 7 6 5 4 3 2 1
 6 5 4 3 2 1 9 8 7
 3 2 1 9 8 7 6 5 4
 8 9 6 7 4 5 2 1 3
 7 4 5 2 1 3 8 9 6
 2 1 3 8 9 6 7 4 5
 5 7 9 4 6 8 1 3 2
 4 6 8 1 3 2 5 7 9
 1 3 2 5 7 9 4 6 8

3.  Next, edit solve.cpp to switch to peg solitaire game (the class
is called Marble).  Run it to completion with the usleep delay set to 10000.
How long does that take on your computer?  Now, comment out the
usleep command as well as the two lines before it.  Now how long does it
take to solve?  (This is why we'll comment these out when we solve
harder puzzles.)

ANSWER:
usleep(10000)
real    0m11.119s
user    0m0.168s
sys     0m0.031s
usleep(0)
real    0m0.160s
user    0m0.157s
sys     0m0.001s

4.  Edit solve.cpp to switch to the 3x3 slider puzzle.  Make sure
the usleep and print statements in solvePuzzle are still commented out.
Try solving the 3x3 slider puzzle.  What happens?  Why?

ANSWER: It takes a really long time. There are 9! (362880) states that it
needs to search through to find the winning state. This can take some time.

After trying to see how much time it would take. The program stopped after
1 hour and a half because a segmentation fault error. This error could be
due to the tremendous use of memory to store the states.

----------------------------------------------------------------------
